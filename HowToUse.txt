@name 
@persist Co:coroutine Done Result:array

if(first()){
    runOnTick(1)
    function number yes(){
        local I = 0
        print("...")
        Co:wait(2)
        print("Hey you, you're finally awake.")
        Co:wait(2)
        print("You were trying to cross the border right?")
        Co:wait(2)
        print("Walked right into that Imperial ambush same as us and that thief over there")
        Co:wait(2)
        print("Damn you Stormcloaks... Skyrim was fine until you came along!")
        Co:wait(3)
        print("Empire was nice and lazy. If they hadnt been looking for you Id have stolen that horse and been halfway to Hammerfell.")
        Co:wait(1)
        print("Looks at Dragonborn You there, you and me, we shouldnt be here. Its these Stormcloaks the Empire wants.")
        
        return 69
    }
    
    function number fuckyou(){
        print(coroutineRunning() ? "coroutine is running" : "nope") # --> coroutine is running
        return 69
    }
    
    function string doerror(){
        print("hello world")
        # This will error because it is not returning a string.
    }
    function callback(A:array){
        print("Try failed with message: " + A[2,string])
    }
    Co = coroutine("yes")
    Co:resume()
    
    print(try("doerror")) # -- > [0,Function doerror() executed and didn't return a value - expecting a value of type string]
    
    try("doerror","callback") # --> Runs function callback() with array provided that returns the same values as the top example.
    
    #print(try("fuckyou")) # --> [0,tick quota exceeded]
    
    local O = coroutine("fuckyou")
    O:resume()
    
    O = O:reboot()
    O:resume()

}elseif(!Done & tickClk()){
    if(Co:status()!="dead"){
        Result = Co:resume()
    }else{
        runOnTick(0)
        Done = 1
        print("Finished e2 coroutine. Printing return result!")
        print(Result)
    }
}
